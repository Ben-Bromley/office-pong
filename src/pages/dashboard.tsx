import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useSession, signIn, signOut } from "next-auth/react"
import { useRouter } from "next/router";
import { FormEvent, ReactHTMLElement, useEffect, useState } from "react";
import LoadingSpinnerScreen from "../components/loadingSpinnerScreen";
import GameHistory from "../components/gameHistory";
import Leaderboard from "../components/leaderboard";

type newGameData = {
  p1: string;
  p2: string;
  p1_score: number;
  p2_score: number;
}

const Dashboard: NextPage = () => {
  const users = trpc.useQuery(["user.getAll"]);
  const newGame = trpc.useMutation(["game.create"]);
  const { data: session, status } = useSession();
  const router = useRouter();
  // set initial input states
  const [p1, setP1] = useState('')
  const [p1Score, setP1Score] = useState('0')
  const [p2, setP2] = useState('DEFAULT')
  const [p2Score, setP2Score] = useState('0')

  useEffect(() => {
    if (status !== "loading" && !session) router.push('/');
  }, [status])

  useEffect(() => {
    if (session?.user) setP1(session.user?.id)
  }, [session, status])

  // show loading screen
  if (status == "loading") return <LoadingSpinnerScreen />

  const handleSubmitGame = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    if (!p1 || !p2 || !parseInt(p1Score) || !parseInt(p2Score)) {
      return alert("please fill in all fields!");
    } else if (parseInt(p1Score) < 11 && parseInt(p2Score) < 11) {
      return alert("You've not finished yet!");
    }

    // TODO: Check scores > 11 are only 2 points apart (valid scores)

    // create new user data
    const newGameData: newGameData = {
      p1,
      p2,
      p1_score: parseInt(p1Score),
      p2_score: parseInt(p2Score)
    }
    console.log(newGameData);
    newGame.mutate({ ...newGameData });

  }

  if (status == "authenticated") {
    return (
      <>
        <Head>
          <title>P3 | Dashboard</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className="grid grid-cols-2 m-2">
          <section className="border-2 m-2 p-2 rounded-md">
            <h1 className="font-bold">Welcome, {session?.user?.name?.split(" ")[0]}</h1>
            <div>
              <h2 className="text-2xl">New Game:</h2>
              <form id="new-game-form" onSubmit={handleSubmitGame}>
                <h3>PLAYER ONE:</h3>
                <select name="p1" id="p1" value={p1} onChange={(e) => setP1(e.target.value)} className="border-2 rounded-md p-2 mx-2 w-48">
                  {users && users?.data?.map(user => {
                    return (
                      <option key={user.id} value={user.id}>{user.name}</option>
                    )
                  })}
                </select>
                <input type="number" value={p1Score} onChange={(e) => { setP1Score(e.target.value) }} min="0" max="50" name="p1_score" id="p1_score" className="border-2 rounded-md p-2 mx-2" />
                <h3>PLAYER TWO:</h3>
                <select name="p2" id="p2" value={p2} onChange={(e) => setP2(e.target.value)} className="border-2 rounded-md p-2 mx-2 w-48">
                  <option value="DEFAULT" disabled> - Select Opponent - </option>
                  {users && users?.data?.map(user => {
                    return (
                      <option key={user.id} value={user.id}>{user.name}</option>
                    )
                  })}
                </select>
                <input type="number" value={p2Score} onChange={(e) => { setP2Score(e.target.value) }} min="0" max="50" name="p2_score" id="p2_score" className="border-2 rounded-md p-2 mx-2" />
                <input type="submit" value="Submit Results" className="block w-40 text-center font-medium border-2 border-blue-500 mt-2 p-2 rounded bg-blue-500 text-white hover:bg-blue-600" />
              </form>
            </div>
          </section>
          <section className="border-2 m-2 p-2 rounded-md">
            <GameHistory players={users.data} />
          </section>
          <section className="border-2 m-2 p-2 rounded-md">
            <Leaderboard />
          </section>
        </main>
      </>
    );
  }

  // return nothing if not authenticated
  return (<></>);
};

export default Dashboard;
